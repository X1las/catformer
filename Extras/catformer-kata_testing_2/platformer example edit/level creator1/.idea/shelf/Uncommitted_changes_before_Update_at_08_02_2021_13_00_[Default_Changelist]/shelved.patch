Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nimport pygame as pg\r\nimport random\r\nfrom settings import *\r\nfrom sprites import *\r\nfrom os import path\r\nfrom level import *\r\n\r\nclass Game:\r\n    def __init__(self):\r\n        # initialize game window, etc\r\n\r\n        pg.init()                                                               # Always need this?\r\n        self.screen = pg.display.set_mode((WIDTH, HEIGHT))                      # Set window size\r\n        pg.display.set_caption(TITLE)                                           # Name the window\r\n        self.clock = pg.time.Clock()                                            # ?\r\n        self.running = True                                                     # ?\r\n        self.font_name = pg.font.match_font(FONT_NAME)                          # Which font to use in game\r\n        self.load_data()                                                        # ?\r\n\r\n    def load_data(self):\r\n        self.dir = path.dirname(__file__)                                       # Gets the directory you are in\r\n        img_dir = path.join(self.dir, 'img')                                    # Loads spritesheet image ??\r\n        self.spritesheet = Spritesheet(path.join(img_dir, SPRITESHEET))         # ^?\r\n\r\n\r\n    def new(self):                                          # start a new game\r\n        self.level = Level(self,l1_platforms, length)       # Add levels\r\n        self.all_sprites = pg.sprite.LayeredUpdates()       # \"LayeredUpdates is a sprite group that handles layers and draws like OrderedUpdates.\"\r\n        self.platforms = pg.sprite.Group()                  # Make platforms a group of sprites (basically, you set the type, like saying int i;)\r\n        self.boxes = pg.sprite.Group()\r\n        self.player = Player(self)                          # Create player (the bunny)\r\n        self.level.setPlatforms()                           # Creates the platforms from the level\r\n\r\n        for plot in l1_boxes:\r\n            Box(self, *plot)\r\n        self.run()\r\n\r\n    def run(self):                  # Game Loop\r\n\r\n        self.playing = True              # ?\r\n        while self.playing:              # ^?\r\n            self.clock.tick(FPS)         # ? (something with making sure it runs at some FPS\r\n            self.events()                # Checks events (such as pressed mouse button)\r\n            self.update()                # ?\r\n            self.draw()                  # Actually draws wtf is going on yo\r\n\r\n\r\n    def update(self):\r\n\r\n        # ----- check if player hits a platform - only if falling\r\n        if self.player.vel.y > 0:                                                              # Only when player moves\r\n            hits = pg.sprite.spritecollide(self.player, self.platforms, False)                 # Returns list of platforms that player collides with\r\n            if hits:                                                                           # If hits is not empty?\r\n                hit_platform = hits[0]                                                         # The first one hit\r\n                for hit in hits:                                                               # Checks to find the bottom must platform (if more a hit)\r\n                    if hit.rect.bottom > hit_platform.rect.bottom:                               #\\\\\r\n                        hit_platform = hit                                                       #\\\\\r\n                if self.player.pos.x < hit_platform.rect.right + 10 and \\\r\n                   self.player.pos.x > hit_platform.rect.left - 10:                            # If the player is actually (horizontically) on the platform\r\n                    if self.player.pos.y < hit_platform.rect.centery:                          # If player is above half of the platform\r\n                        self.player.pos.y = hit_platform.rect.top                              # Pop on top of the platform\r\n                        self.player.vel.y = 0                                                  # Stop player from falling\r\n                        self.player.jumping = False                                            # ?\r\n\r\n\r\n        # If player is to the right\r\n        if self.player.rect.right >= WIDTH * 2/3:                                           # If the player moved to the last 1/3 of the screen\r\n            self.player.pos.x       -= max(abs(self.player.vel.x),2)                        # The player shouldn't move out of the screen, so we make sure the position on screen stays\r\n            for plat in self.platforms:\r\n                plat.rect.centerx  = round(plat.rect.centerx - abs(self.player.vel.x))      # Platforms move oppsite way to make it seem like the player is moving, when it is actually standing still on screen\r\n\r\n        # if player is walking to the left\r\n        if self.player.rect.left <= WIDTH / 3:\r\n            self.player.pos.x       += max(abs(self.player.vel.x),2)\r\n            for plat in self.platforms:\r\n                plat.rect.centerx = round(plat.rect.centerx + abs(self.player.vel.x))\r\n\r\n\r\n        # Die!                                                          Old game's lose criteria\r\n        if self.player.rect.bottom > HEIGHT:                          # Player is below screen\r\n            for sprite in self.all_sprites:                           # Goes through all sprites\r\n                sprite.rect.y -= max(self.player.vel.y, 10)           # The sprites pop up as if they player fell down\r\n                if sprite.rect.bottom < 0:                            # If the sprite is at the top of the screen\r\n                    sprite.kill()                                     # Removes the sprites\r\n        if len(self.platforms) == 0:                                  # If there are no more platforms left\r\n            self.playing = False                                          # Game ends\r\n\r\n        #                                    Game Loop - Update       ?\r\n        self.all_sprites.update()\r\n\r\n\r\n\r\n    def events(self):\r\n        # Game Loop - events\r\n        for event in pg.event.get():                           # Goes through all the events happening in a certrain frame (such as pressing a key)\r\n            if event.type == pg.QUIT:                          # check for closing window\r\n                if self.playing:                               # Stops game\r\n                    self.playing = False                           # \\\\\r\n                self.running = False                                   # \\\\\r\n            if event.type == pg.KEYDOWN:                       # If the type is a key that is pressed down (opposite of a key released)\r\n                if event.key == pg.K_SPACE:                    # If the key pressed is space\r\n                    self.player.jump()                         # Jump\r\n            if event.type == pg.KEYUP:                         # If a key is being released\r\n                if event.key == pg.K_SPACE:                    # If the key is space\r\n                    self.player.jump_cut()                     # Stops trying to jump higher (holding in space makes you jump a bit higher)\r\n\r\n    def draw(self):                                                     # Game Loop - draw\r\n        self.screen.fill(BGCOLOR)                                       # Sets background color\r\n        self.all_sprites.draw(self.screen)                              # Where the sprites should be drawn (the screen obvi)\r\n        #self.draw_text(str(self.score), 22, WHITE, WIDTH / 2, 15)       # Text at the top of the screen showing current score (useless atm)\r\n        pg.display.flip()                                               # *after* drawing everything, flip the display (Nore sure about this one) ?\r\n\r\n\r\n    def draw_text(self, text, size, color, x, y):                       # Just how, where and with what the text is\r\n        font = pg.font.Font(self.font_name, size)\r\n        text_surface = font.render(text, True, color)\r\n        text_rect = text_surface.get_rect()\r\n        text_rect.midtop = (x, y)\r\n        self.screen.blit(text_surface, text_rect)\r\n\r\ng = Game()\r\nwhile g.running:\r\n    g.new()\r\n    g.show_go_screen()\r\npg.quit()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- main.py	(revision 7459b92b9c0d68f2ef9e0ee4e77aaac0ec868c9e)
+++ main.py	(date 1612785403135)
@@ -25,15 +25,18 @@
 
 
     def new(self):                                          # start a new game
-        self.level = Level(self,l1_platforms, length)       # Add levels
+        self.level       = Level(self,l1_platforms, l1_boxes ,length)       # Add levels
         self.all_sprites = pg.sprite.LayeredUpdates()       # "LayeredUpdates is a sprite group that handles layers and draws like OrderedUpdates."
-        self.platforms = pg.sprite.Group()                  # Make platforms a group of sprites (basically, you set the type, like saying int i;)
-        self.boxes = pg.sprite.Group()
-        self.player = Player(self)                          # Create player (the bunny)
+
+        self.platforms   = pg.sprite.Group()                  # Make platforms a group of sprites (basically, you set the type, like saying int i;)
+        self.boxes       = pg.sprite.Group()
+        self.surfaces    = pg.sprite.Group()
+        #self.surfaces.add(self, self.platforms)
+
+        self.player      = Player(self)                          # Create player (the bunny)
         self.level.setPlatforms()                           # Creates the platforms from the level
+        self.level.setBoxes()
 
-        for plot in l1_boxes:
-            Box(self, *plot)
         self.run()
 
     def run(self):                  # Game Loop
@@ -49,10 +52,25 @@
     def update(self):
 
         # ----- check if player hits a platform - only if falling
+
+        if self.player.vel.y > 0:                                                              # Only when player moves
+            hits = pg.sprite.spritecollide(self.player, self.surfaces, False)                 # Returns list of platforms that player collides with
+            if hits:                                                                           # If hits is not empty?
+                hit_platform = hits[0]
+                for hit in hits:                                                               # Checks to find the bottom must platform (if more a hit)
+                    if hit.rect.bottom > hit_platform.rect.bottom:                               #\\
+                        hit_platform = hit                                                       #\\
+                if self.player.pos.x < hit_platform.rect.right + 10 and \
+                   self.player.pos.x > hit_platform.rect.left - 10:                            # If the player is actually (horizontically) on the platform
+                    if self.player.pos.y < hit_platform.rect.centery:                          # If player is above half of the platform
+                        self.player.pos.y = hit_platform.rect.top                              # Pop on top of the platform
+                        self.player.vel.y = 0                                                  # Stop player from falling
+                        self.player.jumping = False
+        """
         if self.player.vel.y > 0:                                                              # Only when player moves
-            hits = pg.sprite.spritecollide(self.player, self.platforms, False)                 # Returns list of platforms that player collides with
+            hits = pg.sprite.spritecollide(self.player, self.all_sprites, False)                 # Returns list of platforms that player collides with
             if hits:                                                                           # If hits is not empty?
-                hit_platform = hits[0]                                                         # The first one hit
+                hit_platform = hits[0]
                 for hit in hits:                                                               # Checks to find the bottom must platform (if more a hit)
                     if hit.rect.bottom > hit_platform.rect.bottom:                               #\\
                         hit_platform = hit                                                       #\\
@@ -62,19 +80,36 @@
                         self.player.pos.y = hit_platform.rect.top                              # Pop on top of the platform
                         self.player.vel.y = 0                                                  # Stop player from falling
                         self.player.jumping = False                                            # ?
+        """
+
+        if self.player.vel.x != 0:
+            boxHits = pg.sprite.spritecollide(self.player, self.boxes, False)
+            if boxHits:
+                hitbox = boxHits[0]
+
+                if self.player.pos.x < hitbox.rect.right + hitbox.width or \
+                    self.player.pos.x > hitbox.rect.left - hitbox.width:
+                    hitbox.rect.centerx  = round(hitbox.rect.centerx + self.player.vel.x)
+
 
 
         # If player is to the right
         if self.player.rect.right >= WIDTH * 2/3:                                           # If the player moved to the last 1/3 of the screen
-            self.player.pos.x       -= max(abs(self.player.vel.x),2)                        # The player shouldn't move out of the screen, so we make sure the position on screen stays
-            for plat in self.platforms:
-                plat.rect.centerx  = round(plat.rect.centerx - abs(self.player.vel.x))      # Platforms move oppsite way to make it seem like the player is moving, when it is actually standing still on screen
+            self.player.pos.x       -= max(abs(self.player.vel.x),2)  # The player shouldn't move out of the screen, so we make sure the position on screen stays
+            for sprite in self.all_sprites:
+                sprite.rect.centerx  = round(sprite.rect.centerx - abs(self.player.vel.x))
+            #for plat in self.platforms:
+                #plat.rect.centerx  = round(plat.rect.centerx - abs(self.player.vel.x))      # Platforms move oppsite way to make it seem like the player is moving, when it is actually standing still on screen
 
         # if player is walking to the left
         if self.player.rect.left <= WIDTH / 3:
             self.player.pos.x       += max(abs(self.player.vel.x),2)
-            for plat in self.platforms:
-                plat.rect.centerx = round(plat.rect.centerx + abs(self.player.vel.x))
+            for sprite in self.all_sprites:
+                sprite.rect.centerx = round(sprite.rect.centerx + abs(self.player.vel.x))
+            #for plat in self.platforms:
+              #  plat.rect.centerx = round(plat.rect.centerx + abs(self.player.vel.x))
+
+
 
 
         # Die!                                                          Old game's lose criteria
@@ -122,5 +157,4 @@
 g = Game()
 while g.running:
     g.new()
-    g.show_go_screen()
 pg.quit()
Index: level.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nimport pygame as pg\r\nimport random\r\nfrom settings import *\r\nfrom sprites import *\r\nfrom os import path\r\n\r\nclass Level:\r\n    def __init__(self, game, platforms, length):\r\n        self.platforms = platforms\r\n        self.game = game\r\n        self.length = length\r\n\r\n    def setPlatforms(self):\r\n        for plat in self.platforms:\r\n            Platform(self.game, *plat)\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- level.py	(revision 7459b92b9c0d68f2ef9e0ee4e77aaac0ec868c9e)
+++ level.py	(date 1612781677040)
@@ -6,8 +6,9 @@
 from os import path
 
 class Level:
-    def __init__(self, game, platforms, length):
+    def __init__(self, game, platforms, boxes , length):
         self.platforms = platforms
+        self.boxes = boxes
         self.game = game
         self.length = length
 
@@ -15,6 +16,8 @@
         for plat in self.platforms:
             Platform(self.game, *plat)
 
-
+    def setBoxes(self):
+        for plot in self.boxes:
+            Box(self.game, *plot)
 
 
Index: sprites.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Sprite classes for platform game\r\nimport pygame as pg\r\nfrom settings import *\r\nfrom random import choice, randrange, uniform\r\nfrom os import path\r\nvec = pg.math.Vector2\r\n\r\nclass Spritesheet:                      # \"utility class for loading and parsing spritesheets\" (?)\r\n    def __init__(self, filename):\r\n        self.spritesheet = pg.image.load(filename).convert()\r\n    def get_image(self, x, y, width, height):\r\n        # grab an image out of a larger spritesheet\r\n        image = pg.Surface((width, height))\r\n        image.blit(self.spritesheet, (0, 0), (x, y, width, height))\r\n        image = pg.transform.scale(image, (width // 2, height // 2))\r\n        return image\r\n\r\nclass Player(pg.sprite.Sprite):\r\n    def __init__(self, game):\r\n        self._layer        = PLAYER_LAYER\r\n        self.groups        = game.all_sprites\r\n        pg.sprite.Sprite.__init__(self, self.groups)\r\n        self.game          = game\r\n        self.walking       = False\r\n        self.jumping       = False\r\n        self.current_frame = 0\r\n        self.last_update   = 0\r\n        self.load_images()\r\n        self.image         = self.standing_frames[0]\r\n        self.rect          = self.image.get_rect()\r\n        self.rect.center   = (40, HEIGHT - 100)\r\n        self.pos           = vec(40, HEIGHT - 100)\r\n        self.vel           = vec(0, 0)\r\n        self.acc           = vec(0, 0)\r\n\r\n    def load_images(self):                              # Just gets the images for the player\r\n        self.standing_frames = [self.game.spritesheet.get_image(614, 1063, 120, 191),\r\n                                self.game.spritesheet.get_image(690, 406, 120, 201)]\r\n        for frame in self.standing_frames:\r\n            frame.set_colorkey(BLACK)\r\n        self.walk_frames_r = [self.game.spritesheet.get_image(678, 860, 120, 201),\r\n                              self.game.spritesheet.get_image(692, 1458, 120, 207)]\r\n        self.walk_frames_l = []\r\n        for frame in self.walk_frames_r:\r\n            frame.set_colorkey(BLACK)\r\n            self.walk_frames_l.append(pg.transform.flip(frame, True, False))\r\n        self.jump_frame = self.game.spritesheet.get_image(382, 763, 150, 181)\r\n        self.jump_frame.set_colorkey(BLACK)\r\n\r\n    def jump_cut(self):                             # Never jump faster than a speed of 3.\r\n        if self.jumping:\r\n            if self.vel.y < -3:\r\n                self.vel.y = -3\r\n\r\n    def jump(self):                                                              # jump only if standing on a platform\r\n        self.rect.y += 2                                                         # to see if there is a platform 2 pix below\r\n        hits = pg.sprite.spritecollide(self, self.game.platforms, False)         # Returns the platforms that (may) have been touched\r\n        self.rect.y -= 2                                                         # undo 2 lines before\r\n        if hits and not self.jumping:                                            # If you are on a platform and not jumping\r\n            self.jumping = True                                                  # then you jump\r\n            self.vel.y = -PLAYER_JUMP                                                  #\\\\\r\n\r\n    def update(self):                                                            # Updating pos, vel and acc.\r\n        self.animate()                                                           # Animates first ?\r\n        self.acc = vec(0, PLAYER_GRAV)                                           # Adds gravity\r\n        keys     = pg.key.get_pressed()                                          # Checks for keys getting pressed\r\n        if keys[pg.K_LEFT]:                                                      # If it's left arrow\r\n            self.acc.x = -PLAYER_ACC                                              # Accelerates to the left\r\n        if keys[pg.K_RIGHT]:\r\n            self.acc.x = PLAYER_ACC\r\n\r\n\r\n        # -     Sry, too lazy to look more precisely at it\r\n        # apply friction\r\n        self.acc.x += self.vel.x * PLAYER_FRICTION\r\n        # equations of motion\r\n        self.vel += self.acc\r\n        if abs(self.vel.x) < 0.1:\r\n            self.vel.x = 0\r\n        self.pos += self.vel + 0.5 * self.acc\r\n        # wrap around the sides of the screen\r\n        if self.pos.x > WIDTH + self.rect.width / 2:\r\n            self.pos.x = 0 - self.rect.width / 2\r\n        if self.pos.x < 0 - self.rect.width / 2:\r\n            self.pos.x = WIDTH + self.rect.width / 2\r\n\r\n        self.rect.midbottom = self.pos\r\n\r\n    def animate(self):\r\n        now = pg.time.get_ticks()                                                         # \"get the time in milliseconds\"\r\n        if self.vel.x != 0:                                                               # Set walking to true of the velocity is not 0\r\n            self.walking = True\r\n        else:\r\n            self.walking = False\r\n\r\n        # Walking animation\r\n        if self.walking:\r\n            if now - self.last_update > 180:                                              # If 0.18 secs have gone by since last check (0 at first)\r\n                self.last_update = now                                                    # \"resets\" update time\r\n                self.current_frame = (self.current_frame + 1) % len(self.walk_frames_l)   # swaps between images (so it looks like it's walking)\r\n                bottom = self.rect.bottom\r\n                if self.vel.x > 0:                                                        # checks if player is walking left or right\r\n                    self.image = self.walk_frames_r[self.current_frame]\r\n                else:\r\n                    self.image = self.walk_frames_l[self.current_frame]\r\n                self.rect = self.image.get_rect()                                         # ? resets the rect to the current rect of the player\r\n                self.rect.bottom = bottom                                                 # ? resets bottom\r\n\r\n        # show idle animation         -------------- same idea as before -----------------\r\n        if not self.jumping and not self.walking:\r\n            if now - self.last_update > 350:\r\n                self.last_update = now\r\n                self.current_frame = (self.current_frame + 1) % len(self.standing_frames)\r\n                bottom = self.rect.bottom\r\n                self.image = self.standing_frames[self.current_frame]\r\n                self.rect = self.image.get_rect()\r\n                self.rect.bottom = bottom\r\n        self.mask = pg.mask.from_surface(self.image)\r\n\r\nclass Platform(pg.sprite.Sprite):                               # The platforms (surprise!)\r\n    def __init__(self, game, x, y, width, height, bot):\r\n        self.bot = bot\r\n        self.width = width\r\n        self._layer = PLATFORM_LAYER\r\n        self.groups = game.all_sprites, game.platforms\r\n        pg.sprite.Sprite.__init__(self, self.groups)            # Apparently a must, not sure what it does..\r\n        self.game = game\r\n        images = [self.game.spritesheet.get_image(0, 288, 380, 94),                 #Two types of platform, but I only use nr. 2\r\n                  self.game.spritesheet.get_image(213, 1662, 201, 100)]\r\n\r\n        self.image = pg.transform.scale(images[0], (width, height))                 # Deciding size of the platform\r\n        #self.image = choice(images)\r\n        self.image.set_colorkey(BLACK)                                              # Removes the black background of the sprite image\r\n        self.rect = self.image.get_rect()                                           # get rekt\r\n        self.rect.x = x                                                             # Put the platform at the given coordinate.\r\n        self.rect.y = y                                                                # \\\\\r\n\r\nclass Box(pg.sprite.Sprite):\r\n    def __init__(self, game, x, y, width, height):\r\n        self.game   = game\r\n        self.width  = width\r\n        self.height = height\r\n        self.groups = game.all_sprites, game.platforms\r\n        pg.sprite.Sprite.__init__(self, self.groups)\r\n        self.dir = path.dirname(__file__)\r\n        with open(path.join(self.dir, HS_FILE), 'r') as f:\r\n            try:\r\n                self.highscore = int(f.read())\r\n            except:\r\n                self.highscore = 0\r\n        # load spritesheet image\r\n        img_dir = path.join(self.dir, 'img')\r\n        self.image = pg.image.load(path.join(img_dir, 'RTS_Crate.png')).convert()\r\n        self.image = pg.transform.scale(self.image, (width, height))\r\n        self.rect = self.image.get_rect()\r\n        self.rect.x = x\r\n        self.rect.y = y\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- sprites.py	(revision 7459b92b9c0d68f2ef9e0ee4e77aaac0ec868c9e)
+++ sprites.py	(date 1612783414603)
@@ -117,6 +117,10 @@
                 self.rect.bottom = bottom
         self.mask = pg.mask.from_surface(self.image)
 
+
+
+
+
 class Platform(pg.sprite.Sprite):                               # The platforms (surprise!)
     def __init__(self, game, x, y, width, height, bot):
         self.bot = bot
@@ -140,7 +144,7 @@
         self.game   = game
         self.width  = width
         self.height = height
-        self.groups = game.all_sprites, game.platforms
+        self.groups = game.all_sprites, game.boxes
         pg.sprite.Sprite.__init__(self, self.groups)
         self.dir = path.dirname(__file__)
         with open(path.join(self.dir, HS_FILE), 'r') as f:
Index: settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># game options/settings\r\nTITLE = \"Jumpy!\"\r\nWIDTH = 1000\r\nHEIGHT = 600\r\nFPS = 60\r\nFONT_NAME = 'arial'\r\nHS_FILE = \"highscore.txt\"\r\nSPRITESHEET = \"spritesheet_jumper.png\"\r\n\r\n# Player properties\r\nPLAYER_ACC = 0.5\r\nPLAYER_FRICTION = -0.12\r\nPLAYER_GRAV = 0.7\r\nPLAYER_JUMP = 20\r\n\r\n# Game properties\r\nBOOST_POWER = 60\r\nPOW_SPAWN_PCT = 7\r\nMOB_FREQ = 5000\r\nPLAYER_LAYER = 2\r\nPLATFORM_LAYER = 1\r\nPOW_LAYER = 1\r\nMOB_LAYER = 2\r\nCLOUD_LAYER = 0\r\n\r\n# Starting platforms\r\nPLATFORM_LIST = [(0, HEIGHT - 10, 2000, 40),\r\n                 (WIDTH / 2 - 50, HEIGHT * 3 / 4 - 50, 220, 40),\r\n                 (1000, HEIGHT - 350, 260, 40),\r\n                 (350, 200, 200, 40),\r\n                 (175, 100, 260, 40)]\r\n\r\n# define colors\r\nWHITE = (255, 255, 255)\r\nBLACK = (0, 0, 0)\r\nRED = (255, 0, 0)\r\nGREEN = (0, 255, 0)\r\nBLUE = (0, 0, 255)\r\nYELLOW = (255, 255, 0)\r\nLIGHTBLUE = (0, 155, 155)\r\nBGCOLOR = LIGHTBLUE\r\n\r\n#Level 1\r\nlength = 5000\r\n\r\nl1_platforms = [(-400,    HEIGHT - 10,  length, 60, True),\r\n                (300,  HEIGHT / 2,   500,    40, False),\r\n                (1000, HEIGHT - 350, 260,    40, False),\r\n                (1500, HEIGHT - 200, 200,    40, False),\r\n                (600,  HEIGHT - 100, 260,    40, False),\r\n                (800,  HEIGHT - 100, 260,    40, False),\r\n                (1108, HEIGHT - 100, 260,    40, False),\r\n                (750,  HEIGHT - 100, 260,    40, False),\r\n                (450,  HEIGHT - 100, 260,    40, False)]\r\n\r\nl1_boxes = [(400, HEIGHT - 50,  10, 10)]\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- settings.py	(revision 7459b92b9c0d68f2ef9e0ee4e77aaac0ec868c9e)
+++ settings.py	(date 1612781088596)
@@ -53,5 +53,5 @@
                 (750,  HEIGHT - 100, 260,    40, False),
                 (450,  HEIGHT - 100, 260,    40, False)]
 
-l1_boxes = [(400, HEIGHT - 50,  10, 10)]
+l1_boxes = [(400, HEIGHT - 50,  40, 40)]
 
